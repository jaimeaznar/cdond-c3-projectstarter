version: 2.1

commands:    
    destroy_environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
        steps:
            - run:
                name: Clean S3 folder
                when: on_fail
                command: |
                    aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7}-backend
                    aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7}-frontend
    
    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        steps:
            - run:
                name: Revert migrations
                when: on_fail
                command: |
                    # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                    SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7})
                    echo $SUCCESS
                    if(( $SUCCESS == 1 )) 
                    then
                        cd ~/project/backend
                        npm install
                        #  Add revert code here. You can find this in the Getting Started section.
                        npm run migrations:revert
                    fi

jobs:
    build-frontend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Build front-end
                command: |
                    cd frontend
                    npm install
                    npm run build
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build
          

    build-backend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Back-end build
                command: |
                    cd backend
                    npm install
                    npm run build
            - save_cache:
                paths: [backend/node_modules]
                key: backend-build
          

    test-frontend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend test
                command: |
                    cd frontend
                    npm install
                    npm run test
          

    test-backend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Run backend test
                command: |
                    cd backend
                    npm install
                    npm run test
          

    scan-frontend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend scan
                command: |
                    
                    cd frontend
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit fix --force
                    npm audit --audit-level=critical
          

    scan-backend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Run backend scan
                command: |
                    
                    cd backend
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit fix --force
                    npm audit --audit-level=critical
          
    
    deploy-infrastructure:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install tar and gzip
                command: |
                    apt-get -y install tar gzip
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure back-end infrastructure exists.
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/backend.yml \
                    --tags project=udapeople \
                    --stack-name "udapeople-${CIRCLE_WORKFLOW_ID:0:7}-backend" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            - run:
                name: Ensure front-end infrastructure exist
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/frontend.yml \
                    --tags project=udapeople \
                    --stack-name "udapeople-${CIRCLE_WORKFLOW_ID:0:7}-frontend" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            - run:
                name: Add back-end ip to ansible inventory
                command: |
                    # Your code here
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text >> .circleci/ansible/inventory.txt 
            - persist_to_workspace:
                root: .circleci/ansible/
                paths:
                    - inventory.txt
            - destroy_environment
          
            
    configure-infrastructure:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["39:03:df:b4:a6:79:7e:53:08:e0:25:af:88:6e:87:0b"] 
            - attach_workspace:
                at: .circleci/ansible/
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install Ansible
                command: |
                    # Install Ansible
                    apt-get -y install ansible
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Run Playbook and Configure server
                no_output_timeout: 30m
                command: |
                    # Your command
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
            - destroy_environment 
          
                    
    run-migrations:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - attach_workspace:
                at: ~/
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (CURL)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Run migrations
                command: |
                    cd backend
                    npm install
                    npm run build   
                    npm run migrations > migrations_dump.txt
                    cat migrations_dump.txt             
            - run:
                name: Send migration results to kvdb.io
                command: |
                    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then
                        echo "Migration status was successful"
                        curl https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                    fi
            - destroy_environment 
            - revert-migrations
          

    deploy-frontend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (tar)
                command: |
                    apt-get -y install tar
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Get backend url
                command: |
                    # your code here
                    BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
                    export API_URL="http://${BACKEND_IP}:3030"
                    echo "${API_URL}"
                    echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      
                    cat frontend/.env
            - run:
                name: Deploy frontend objects
                command: |
                    # your code here
                    cd frontend
                    npm install

                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy_environment 
            - revert-migrations
          
    
    deploy-backend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["39:03:df:b4:a6:79:7e:53:08:e0:25:af:88:6e:87:0b"]
            - attach_workspace:
                at: .circleci/ansible/
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Tar)
                command: |
                    apt-get -y install tar
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run: 
                name: Install dependencies (Ansible)
                command: |
                    apt-get -y install ansible
            - run:
                name: Deploy backend
                command: |
                    # your code here
                    cd backend
                    npm i
                    npm run build
                    cd ..
                    # Zip the directory
                    tar -C backend -czvf artifact.tar.gz .
                    echo "Contents  of the inventory.txt file is -------"
                    cd .circleci/ansible
                    cat inventory.txt
                    ansible-playbook -i inventory.txt deploy-backend.yml
            - destroy_environment 
            - revert-migrations 
           

    smoke-test:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Curl)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Backend smoke test.
                command: |
                    BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
                    echo "Backend-ip: ${BACKEND_IP}"
                    API_URL="http://${BACKEND_IP}:3030"
                    echo "API URL: ${API_URL}"

                    # your code here
                    # Fetch and prepare the BACKEND_IP env var
                    if curl "${API_URL}/api/status" | grep "ok"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - run:
                name: Frontend smoke test.
                command: |
                    # your code here
                    sleep 60
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
                    echo ${URL} 
                    if curl -s ${URL} | grep "Welcome"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - destroy_environment 
            - revert-migrations
             


    cloudfront-update:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: Save Old Workflow ID to kvdb.io
            command: |
                export OldWorkflowID=$(aws --region us-west-2 cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
                echo "Old Wokflow ID: $OldWorkflowID"
                curl https://kvdb.io/${KVDB_BUCKET_ID}/old_workflow_id_2 -d "${OldWorkflowID}"
        - run:
            name: Update cloudfront distribution.
            command: |
                aws cloudformation deploy \
                        --template-file .circleci/files/cloudfront.yml \
                        --stack-name InitialStack \
                        --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                        --region us-west-2 \
                        --tags project=udapeople
                
        - destroy_environment 
        - revert-migrations

    cleanup:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: Get old stack workflow id and Cleanup
            command: |           
                export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/old_workflow_id_2)
                export STACKS=($(aws --region us-west-2 cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
                echo OldWorkflowID: "${OldWorkflowID}"
                echo CIRCLE_WORKFLOW_ID "$CIRCLE_WORKFLOW_ID"
                echo Stack names: "${STACKS[@]}"
                if [[ ${STACKS[@]} =~ "${OldWorkflowID}" ]]
                then
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7}-backend
                aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7}-frontend
                echo "=======================Delete Confirmed========================"
                else
                echo "=======================Didn't delete========================"            
                fi
workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires: [test-frontend, test-backend, scan-frontend, scan-backend]
            - configure-infrastructure:
                requires: [deploy-infrastructure]
            - run-migrations:
                requires: [configure-infrastructure]
            - deploy-frontend:
                requires: [run-migrations]
            - deploy-backend:
                requires: [run-migrations]
            - smoke-test:
                requires: [deploy-backend, deploy-frontend]
            - cloudfront-update:
                requires: [smoke-test]
            - cleanup:
                requires: [cloudfront-update]
            
